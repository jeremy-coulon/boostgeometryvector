cmake_minimum_required(VERSION 2.8)

list(APPEND CMAKE_MODULE_PATH 
    ${CMAKE_CURRENT_LIST_DIR}/cmake/Modules
)
set(CMAKE_USER_MAKE_RULES_OVERRIDE ${CMAKE_CURRENT_LIST_DIR}/cmake/cmake-tools/DefaultBuildFlags.cmake)
mark_as_advanced(CMAKE_CODEBLOCKS_EXECUTABLE)

project(BoostGeometryVector NONE)

# Set project version
include(version.cmake)

#############
#  Sources  #
#############

set(PROJECT_INCLUDE_DIR
    ${PROJECT_SOURCE_DIR}/include
)

set(${PROJECT_NAME}_INCLUDE_DIR ${PROJECT_INCLUDE_DIR} CACHE INTERNAL "")

set(PROJECT_FILES
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/BoostGeometryVector.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/assign.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/comparable_length.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/convert.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/disjoint.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/equals.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/length.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/transform.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/detail/assign_values.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/detail/convert_vector_to_vector.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/algorithms/detail/disjoint.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/arithmetic/cross_product.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/core/access.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/core/closure.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/core/point_order.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/core/tags.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/core/geometry_id.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/geometries/geometries.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/geometries/vector.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/geometries/concepts/check.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/geometries/concepts/vector_concept.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/geometries/register/vector.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/strategies/strategies.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/strategies/length.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/strategies/tags.hpp
    ${PROJECT_INCLUDE_DIR}/${PROJECT_NAME}/strategies/cartesian/length_pythagoras.hpp
)

add_custom_target(
    ${PROJECT_NAME}
    COMMAND ""
    SOURCES ${PROJECT_FILES}
)

######################
#  Global variables  #
######################

# Set install path
include(GNUInstallDirs)
set(CMAKE_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake)
set(CMAKE_INSTALL_FULL_CMAKEDIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_CMAKEDIR})

# Build output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    set(${PROJECT_NAME}_PACKAGING_ENABLED TRUE CACHE INTERNAL "")
else()
    set(${PROJECT_NAME}_PACKAGING_ENABLED FALSE CACHE INTERNAL "")
endif()

####################
#  Subdirectories  #
####################

add_subdirectory(share)
add_subdirectory(src)

###############
#  Packaging  #
###############

# Following code is enabled only if BoostGeometryVector is the top level project
if(${PROJECT_NAME}_PACKAGING_ENABLED)

    ###############
    #  Packaging  #
    ###############

    # Package include directory
    install(DIRECTORY
        ${PROJECT_INCLUDE_DIR}/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        COMPONENT dev
        PATTERN "*~" EXCLUDE
    )

    mark_as_advanced(CMAKE_INSTALL_PREFIX)

    ###########
    #  CPack  #
    ###########

    if(WIN32)
        set(CPACK_GENERATOR "ZIP")
        set(CPACK_SOURCE_GENERATOR "ZIP")
    elseif(UNIX)
        set(CPACK_GENERATOR "TGZ")
        set(CPACK_SOURCE_GENERATOR "TGZ")
    endif()
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Boost.Geometry extension to support vector concept and algorithms.")
    set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE_1_0.txt")
    set(CPACK_PACKAGE_VERSION_MAJOR ${${PROJECT_NAME}_MAJOR})
    set(CPACK_PACKAGE_VERSION_MINOR ${${PROJECT_NAME}_MINOR})
    set(CPACK_PACKAGE_VERSION_PATCH ${${PROJECT_NAME}_PATCH})
    set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}_v${${PROJECT_NAME}_VERSION}")
    set(CPACK_SOURCE_PACKAGE_FILE_NAME "${PROJECT_NAME}-src_v${${PROJECT_NAME}_VERSION}")
    set(CPACK_SOURCE_IGNORE_FILES "/build/;/install/;CMakeLists.txt.user;.git;.gitignore;.gitmodules;~$")

    include(CPack)

endif()
